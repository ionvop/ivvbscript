' WORK IN PROGRESS;

> directory;
directory = #getparentfoldername(wscript.scriptfullname);

> Main()
    > i, element, content, scope, token, result, temp, temp2, statement, funcScope, interpolate;
    content = #opentextfile(^1).readall();
    content = replace(content, vbcrlf, "");
    scope = "code";
    token = "start";
    result = `option explicit\n`

    &result = `
dim ivvbsobjshell, ivvbsobjfile, ivvbsobjhttp\n
set ivvbsobjshell = createobject("wscript.shell")\n\
set ivvbsobjfile = createobject("scripting.filesystemobject")\n
set ivvbsobjhttp = createobject("msxml2.xmlhttp.6.0")\n
ivvbsobjshell.currentdirectory = ivvbsobjfile.getparentfolderName(ivvbsobjfile.getabsolutepathname(wscript.arguments(0)))\n
sub ivvbsprint(ivvbsmessage)\n
dim ivvbselement\n
if typename(ivvbsmessage) = "Variant()" then\n
for each ivvbselement in ivvbsmessage\n
wscript.echo(ivvbselement)\n
next\n
exit sub\n
end if\n
wscript.echo(ivvbsmessage)\n
end sub\n
`;

    statement = "";
    funcScope = "";
    i = 1;

    [
        ? i > len(content):
            \
        ?;

        element = mid(content, i, 1);

        ? scope = "code":
            ? element = `"`:
                scope = "string";
                &statement: `"`;
                +i;
                element = mid(content, i, 1);
            :? element = "`":
                scope = "literal";
                &statement: `"`;
                +i;
                element = mid(content, i, 1);
            :? element = "$":
                &statement: "ivvbsobjshell.";
                +i;
                element = mid(content, i, 1);
            :? element = "#":
                &statement: "ivvbsobjfile.";
                +i;
                element = mid(content, i, 1);
            :? element = "%":
                &statement: "ivvbsobjhttp.";
                +i;
                element = mid(content, i, 1);
            :? element = "^":
                &statement: `wscript.arguments(${mid(content, i + 1, 1)})`;
                +i: 2;
                element = mid(content, i, 1);
            ?;
        ?;
        
        ? scope = "code":
            ? token = "start":
                ? element = " " or element = vbtab or element = vbcrlf:
                :? element = ".":
                    token = "print";
                    statement = "";
                :? element = ",":
                    token = "input";
                    statement = "";
                :? element = "?":
                    ? mid(content, i + 1, 1) = ";":
                        &result: `end if\n`;
                        +i;
                    :
                        token = "if";
                    ?;

                    statement = "";
                :? element = ":":
                    ? mid(content, i + 1, 1) = "?":
                        token = "elseif";
                        +i;
                    :
                        &result: `else\n`;
                    ?;

                    statement = "";
                :? element = ">":
                    token = "dim";
                    statement = "";
                :? element = "<":
                    token = "return";
                    statement = "";
                :? element = "+" or element = "-" or element = "*" or element = "/" or element = "&":
                    token = "operate";
                    temp = element;
                    statement = "";
                :? element = "[":
                    &result: `do\n`;
                    statement = "";
                :? element = "]":
                    &result: `loop\n`;
                    statement = "";
                :? element = "\":
                    &result: `exit do\n`;
                    statement = "";
                :? element = "!":
                    token = "exit";
                    statement = "";
                :? element = "~":
                    token = "sleep";
                    statement = "";
                :
                    token = "normal";
                    &statement: element;
                ?;
            :? token = "normal":
                ? element = ";":
                    token = "start";
                    &result: statement & vbcrlf;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "print":
                ? element = ";":
                    token = "start";
                    &result: `ivvbsprint(${statement})\n`;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "input":
                ? element = ":":
                    token = "input2";
                    temp = statement;
                    statement = "";
                :? element = ";":
                    token = "start";
                    &result: `${statement} = wscript.stdin.readline()\n`;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "input2":
                ? element = ";":
                    token = "start";
                    &result: `wscript.stdout.write("${statment}")\n`;
                    &result: `${temp} = wscript.stdin.readline()\n`;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "if":
                    ? element = ":":
                        token = "start";
                        &result: `if ${statement} then\n`;
                        statement = "";
                    :
                        &statement: element;
                    ?;
            :? token = "elseif":
                    ? element = ":":
                        token = "start";
                        &result: `elseif ${statement} then\n`;
                        statement = "";
                    :
                        &statement: element;
            :? token = "dim":
                ? element = ">":
                    ? statement = "":
                        token = "redim";
                        statement = "";
                    :
                        &statement: element;
                    ?;
                :? element = "(":
                    token = "function";
                    temp = statement;
                    statement = "";
                :? element = ";":
                    token = "start";
                    &result: `dim ${statement}\n`;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "redim":
                ? element = ";":
                    token = "start";
                    &result: `redim preserve ${statement}\n`;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "function":
                ? element = ")":
                    token = "start";
                    &result: `function ${temp}(${statement})\n`;
                    funcScope = temp;
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "return":
                ? element = ";":
                    token = "start";
                    &result: `${funcScope} = ${statement}\n`;
                    &result: `end function\n`;
                    funcScope = "";
                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "operate":
                ? element = ":":
                    token = "operate2";
                    temp2 = statement;
                    statement = "";
                :? element = ";":
                    token = "start";
                    

                    ? temp = "+" or temp = "-":
                        &result: `${statement} = ${statement} ${temp} 1\n`;
                    :? temp = "*" or temp = "/":
                        &result: `${statement} = ${statement} ${temp} 2\n`;
                    case "&"
                        &result: `${statement} = ${statement} & vbcrlf\n`;
                    ?;

                    statement = "";
                :
                    &statement: element;
                ?;
            :? token = "operate2":
                    ? element = ";":
                        token = "start";
                        &result: `${temp2} = ${temp2} ${temp} ${statement}\n`;
                        statement = "";
                    :
                        &statement: element;
                    ?;
            :? token = "exit":
                select case element
                    case ";"
                        token = "start"

                        if statement = "" then
                            &result: "wscript.quit()" & vbcrlf
                        else
                            &result: "ivvbsprint(" & statement & ")" & vbcrlf
                            &result: "wscript.quit()" & vbcrlf
                        end if

                        statement = ""
                    case else
                        &statement: element
                end select
            :? token = "sleep":
                select case element
                    case ";"
                        token = "start"
                        &result: "wscript.sleep(" & statement & ")" & vbcrlf
                    case else
                        &statement: element
                end select
            ?;
        :? scope = "string":
            select case element
                case """"
                    scope = "code"
                    &statement: """"
                case else
                    &statement: element
            end select
        :? scope = "literal":
            select case element
                case vbcrlf
                case """"
                    &statement: """"""
                case "$"
                    if mid(content, i + 1, 1) = "{" then
                        interpolate = true
                        +i;
                        &statement: """ & "
                    else
                        &statement: element
                    end if
                case "}"
                    if interpolate = true then
                        interpolate = false
                        &statement: " & """
                    else
                        &statement: element
                    end if
                case "\"
                    +i;

                    select case mid(content, i, 1)
                        case "n"
                            &statement: """ & vbcrlf & """
                        case "t"
                            &statement: """ & vbtab & """
                        case "`"
                            &statement: "`"
                        case "$"
                            &statement: "$"
                        case "\"
                            &statement: "\"
                        case else
                            &statement: element
                    end select
                case "`"
                    scope = "code"
                    &statement: """"
                case else
                    &statement: element
            end select
        ?;

        +i;
    ]

    objFile.CreateTextFile(directory & "\output.vbs", true).Write(result)
< 0;

Main();
